// <auto-generated />
using System;
using Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.MigrationsSqlServer
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250910080033_IprimerMigrations")]
    partial class IprimerMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "Manages system modules, allowing users to define, modify, and assign modules available to them based on established roles and permissions.",
                            Icon = "fa-solid fa-window-maximize",
                            Name = "Modules",
                            Order = 1,
                            Path = "security/modules",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "Manages the forms available in the system, allowing the creation, modification, and deletion of forms associated with different functionalities and modules.",
                            Icon = "fa-solid fa-window-restore",
                            Name = "Forms",
                            Order = 2,
                            Path = "security/forms",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "Allows you to assign specific permissions to users and roles, controlling access to functions, forms, and modules according to the system's needs and security policies.",
                            Icon = "fa-solid fa-user-lock",
                            Name = "Permissions",
                            Order = 3,
                            Path = "security/permissions",
                            State = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "Defines and manages roles within the system, allowing you to assign specific permissions to each role and control access to different application features and resources.",
                            Icon = "fa-solid fa-users-gear",
                            Name = "Roles",
                            Order = 4,
                            Path = "security/roles",
                            State = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "It allows you to manage user information, including its creation, editing, and deletion. It facilitates the assignment of roles and permissions, ensuring controlled access to the system.",
                            Icon = "fa-solid fa-users",
                            Name = "Users",
                            Order = 5,
                            Path = "security/users",
                            State = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "It allows you to manage the information of people associated with the system, such as users, employees, or any other relevant entity. It facilitates the creation, editing, and deletion of records, allowing you to link people to specific roles, modules, and permissions as needed.",
                            Icon = "fa-solid fa-user",
                            Name = "Persons",
                            Order = 6,
                            Path = "security/persons",
                            State = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "This form allows the registration and management of customers within the system. It facilitates the creation, editing, and tracking of customer records, enabling the association of relevant operational data and interactions essential for service delivery and follow-up.",
                            Icon = "fa-solid fa-building-user",
                            Name = "Customers",
                            Order = 1,
                            Path = "operational/customers",
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.FormModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ModuleId");

                    b.ToTable("FormModules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 1,
                            ModuleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 2,
                            ModuleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 3,
                            ModuleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 4,
                            ModuleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 5,
                            ModuleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 6,
                            ModuleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 7,
                            ModuleId = 2,
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.LineThematic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("LineThematics");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.PopulationGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PopulationGrade");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Entity.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "The security module manages authentication, roles, permissions, and access to the system's forms and modules, ensuring the control and protection of information.",
                            Name = "Security",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "The operational module manages the system's core functional forms, allowing users to execute day-to-day activities",
                            Name = "Operational",
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPdf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("TypeEvaluation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.EvaluationCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("EvaluationCriterias");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinationTransversalProjects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coverage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Developmenttime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExperiencesCovidPandemic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("Methodologias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameExperiences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PedagogicalStrategies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recognition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Socialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThemeExperienceArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tranfer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.ExperienceGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("GradeId");

                    b.ToTable("ExperienceGrades");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.ExperienceLineThematic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("LineThematicId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("LineThematicId");

                    b.ToTable("ExperienceLineThematics");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.ExperiencePopulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("PopulationGradeId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("PopulationGradeId");

                    b.ToTable("ExperiencePopulation");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.HistoryExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryExperiences");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Departament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailInstitucional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProblem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dissemination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnfoqueExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("InnovationExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaphoricalPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectiveExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResulsExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("SustainabilityExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Testimony")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("ExperienceId1")
                        .IsUnique()
                        .HasFilter("[ExperienceId1] IS NOT NULL");

                    b.ToTable("verifications");
                });

            modelBuilder.Entity("Entity.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "0001",
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "Allows the user to query, update, and delete records within the system, granting full access to the management of associated data.",
                            Name = "Reading and writing",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "0002",
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "Allows the user to only view records within the system, without permission to perform updates or deletions.",
                            Name = "Reading only",
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeDane")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailInstitutional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeDane = "441001004839",
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            DocumentType = 1,
                            Email = "mariaalejan1080@gmail.com",
                            EmailInstitutional = "mariaa_marinh@soy.sena.com",
                            FirstLastName = "MARIN",
                            FirstName = "MARIA",
                            IdentificationNumber = "1000000000",
                            MiddleName = "ALEJANDRA",
                            Phone = 3243652328L,
                            SecondLastName = "HENRIQUEZ",
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "01",
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Description = "",
                            Name = "SUPERADMIN",
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.RoleFormPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFormPermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 1,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 2,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 3,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 4,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 5,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 6,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            FormId = 7,
                            PermissionId = 1,
                            RoleId = 1,
                            State = true
                        });
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "0001",
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            Password = "202CB962AC59075B964B07152D234B70",
                            PersonId = 1,
                            State = true,
                            Username = "mariaalejan1080@gmail.com"
                        });
                });

            modelBuilder.Entity("Entity.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 10, 3, 0, 32, 700, DateTimeKind.Utc).AddTicks(439),
                            RoleId = 1,
                            State = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entity.Models.FormModule", b =>
                {
                    b.HasOne("Entity.Models.Form", "Form")
                        .WithMany("FormModules")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Module", "Module")
                        .WithMany("FormModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Document", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("Documents")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Evaluation", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("Evaluations")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelosParametros.State", null)
                        .WithMany("Evaluations")
                        .HasForeignKey("StateId");

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany("Evaluations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.EvaluationCriteria", b =>
                {
                    b.HasOne("Entity.Models.ModelosParametros.Criteria", "Criteria")
                        .WithMany("EvaluationCriterias")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModuleOperation.Evaluation", "Evaluation")
                        .WithMany("EvaluationCriterias")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Experience", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Institution", "Institution")
                        .WithMany("Experiences")
                        .HasForeignKey("InstitucionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelosParametros.State", "State")
                        .WithMany("Experiences")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.ExperienceGrade", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("ExperienceGrades")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelosParametros.Grade", "Grade")
                        .WithMany("ExperienceGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.ExperienceLineThematic", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("ExperienceLineThematics")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelosParametros.LineThematic", "LineThematic")
                        .WithMany("ExperienceLineThematics")
                        .HasForeignKey("LineThematicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("LineThematic");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.ExperiencePopulation", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("ExperiencePopulations")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelosParametros.PopulationGrade", "PopulationGrade")
                        .WithMany("ExperiencePopulations")
                        .HasForeignKey("PopulationGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("PopulationGrade");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.HistoryExperience", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("HistoryExperiences")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModelosParametros.State", "State")
                        .WithMany("HistoryExperiences")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany("HistoryExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Objective", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("Objectives")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Verification", b =>
                {
                    b.HasOne("Entity.Models.ModuleOperation.Experience", "Experience")
                        .WithMany("verifications")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.ModuleOperation.Experience", null)
                        .WithOne("Verification")
                        .HasForeignKey("Entity.Models.ModuleOperation.Verification", "ExperienceId1");

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Entity.Models.RoleFormPermission", b =>
                {
                    b.HasOne("Entity.Models.Form", "Form")
                        .WithMany("RoleFormPermissions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Permission", "Permission")
                        .WithMany("RoleFormPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Role", "Role")
                        .WithMany("RoleFormPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.HasOne("Entity.Models.Person", "Person")
                        .WithMany("User")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity.Models.UserRole", b =>
                {
                    b.HasOne("Entity.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Form", b =>
                {
                    b.Navigation("FormModules");

                    b.Navigation("RoleFormPermissions");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.Criteria", b =>
                {
                    b.Navigation("EvaluationCriterias");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.Grade", b =>
                {
                    b.Navigation("ExperienceGrades");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.LineThematic", b =>
                {
                    b.Navigation("ExperienceLineThematics");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.PopulationGrade", b =>
                {
                    b.Navigation("ExperiencePopulations");
                });

            modelBuilder.Entity("Entity.Models.ModelosParametros.State", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Experiences");

                    b.Navigation("HistoryExperiences");
                });

            modelBuilder.Entity("Entity.Models.Module", b =>
                {
                    b.Navigation("FormModules");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Evaluation", b =>
                {
                    b.Navigation("EvaluationCriterias");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Experience", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Evaluations");

                    b.Navigation("ExperienceGrades");

                    b.Navigation("ExperienceLineThematics");

                    b.Navigation("ExperiencePopulations");

                    b.Navigation("HistoryExperiences");

                    b.Navigation("Objectives");

                    b.Navigation("Verification");

                    b.Navigation("verifications");
                });

            modelBuilder.Entity("Entity.Models.ModuleOperation.Institution", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Entity.Models.Permission", b =>
                {
                    b.Navigation("RoleFormPermissions");
                });

            modelBuilder.Entity("Entity.Models.Person", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Role", b =>
                {
                    b.Navigation("RoleFormPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Experiences");

                    b.Navigation("HistoryExperiences");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
